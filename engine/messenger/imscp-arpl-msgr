#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2019 by Laurent Declercq <l.declercq@nuxwin.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use FindBin;
use lib "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";
use Encode qw/ decode encode /;
use iMSCP::Boolean;
use iMSCP::Bootstrapper;
use Mail::Address;
use MIME::Parser;
use MIME::Entity;

iMSCP::Bootstrapper->getInstance()->boot( {
    mode            => 'backend',
    nolock          => TRUE,
    norequirements  => TRUE,
    config_readonly => TRUE
} );

eval {
    my $dbh = iMSCP::Database->factory()->getRawDb();
    $dbh->do(
        "
            DELETE FROM `autoreplies_log`
            WHERE ADDTIME(`time`, '24:00:00') < NOW()
        "
    );

    ( my $from = $ARGV[0] ) =~ s/imscp-arpl\.//;

    my $message = do {
        local $/;
        <STDIN>;
    };

    # Setup MIME parser
    my $mimeParser = MIME::Parser->new();
    $mimeParser->output_to_core( TRUE );
    $mimeParser->tmp_to_core( TRUE );

    # Parse MIME message
    my $mimeEntity = $mimeParser->parse_data( $message ) or die(
        "Couldn't parse MIME message"
    );
    undef $mimeParser;

    # Retrieve MIME headers
    my $mimeHeaders = $mimeEntity->head() or die(
        "Couldn't get MIME headers"
    );
    undef $mimeEntity;

    # Return early if:
    # - the message has been tagged has SPAM
    # - the message look like a vacation message
    # - the message look like an automatic answer
    return if ( $mimeHeaders->get( 'x-spam-flag' )
        && $mimeHeaders->get( 'x-spam-flag' ) =~ /yes/i )
        || ( $mimeHeaders->get( 'x-mailer' )
        && $mimeHeaders->get( 'x-mailer' ) =~ /Auto-Reply/i )
        || ( $mimeHeaders->get( 'auto-submitted' )
        && $mimeHeaders->get( 'auto-submitted' ) =~ /auto-replied/i )
        || ( $mimeHeaders->get( 'sender' )
        && $mimeHeaders->get( 'sender' ) =~ /autoresponder/i )
        || $mimeHeaders->get( 'x-autoresponse-from' );

    # Get sender address (address to which we need send the vacation message)
    my ( $to ) = Mail::Address->parse( $mimeHeaders->get( 'from' )) or die(
        "Couldn't parse 'From' MIME header"
    );
    $to = $to->address();

    # Return early if the sender look like a mail to which we should not send
    # vacation message
    # - the sender
    for (
        qr/bounces.*@/,
        qr/subscribe.*@/,
        qr/noreply.*@/,
        qr/mailer-daemon@/
    ) {
        return if $to =~ /$_/i;
    }

    # Get original subject
    my $subject = $mimeHeaders->get( 'subject' );
    undef $mimeHeaders;

    my $val = $dbh->selectrow_array(
        "
            SELECT COUNT(`time`)
            FROM `autoreplies_log`
            WHERE `from` = ?
            AND `to` = ?
            AND ADDTIME(`time`, '24:00:00') > NOW()
        ",
        undef,
        $from,
        $to
    );

    return if $val;

    $val = $dbh->selectrow_array(
        '
            SELECT `mail_auto_respond_text`
            FROM `mail_users`
            WHERE `mail_addr` = ?
            AND `mail_auto_respond` = 1
        ',
        undef,
        $from
    );

    return unless $val;

    # Build new multipart MIME message
    $mimeEntity = MIME::Entity->build(
        Type                  => 'multipart/mixed; charset=utf-8',
        From                  => $from,
        To                    => $to,
        Subject               => encode( 'UTF-8', decode( 'UTF-8', $subject )),
        'X-Autoresponse-From' => $from,
        'X-Mailer'            => "i-MSCP Auto-Reply Mailer"
    );

    # Attach auto-reply message
    $mimeEntity->attach(
        Type        => 'text/plain; charset=utf-8',
        Encoding    => '8bit',
        Description => 'Mail User Auto-Reply Message',
        #Data        => encode( 'UTF-8', decode( 'UTF-8', $val ))
        Data        => encode( 'utf8', $val )

    );

    # Attach original message
    $mimeEntity->attach(
        Type        => 'message/rfc822',
        Description => 'Original Message',
        Data        => $message
    );

    # Send message through sendmail command
    open my $fh, '|-', '/usr/sbin/sendmail -t -oi' or die( sprintf(
        "Couldn't send auto-reply message: %s", $!
    ));
    $mimeEntity->print( $fh );
    close $fh;
    undef $mimeEntity;

    $dbh->do(
        '
            INSERT INTO `autoreplies_log` (
                `time`, `from`, `to`
            ) VALUES (
                NOW(),?,?
            )
        ',
        undef,
        $from,
        $to
    );
};
if ( $@ ) {
    print STDERR $@;
    exit 1;
}
